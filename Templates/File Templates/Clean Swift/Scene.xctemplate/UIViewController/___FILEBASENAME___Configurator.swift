//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Connect View, Interactor, and Presenter
typealias ___FILEBASENAMEASIDENTIFIER___InteractorInput = ___FILEBASENAMEASIDENTIFIER___ViewControllerOutput
typealias ___FILEBASENAMEASIDENTIFIER___PresenterInput = ___FILEBASENAMEASIDENTIFIER___InteractorOutput
typealias ___FILEBASENAMEASIDENTIFIER___PresenterOutput = ___FILEBASENAMEASIDENTIFIER___ViewControllerInput

class ___FILEBASENAMEASIDENTIFIER___Configurator
{
    // MARK: - Object lifecycle
    class var sharedInstance: ___FILEBASENAMEASIDENTIFIER___Configurator
    {
        struct Static {
            static var instance: ___FILEBASENAMEASIDENTIFIER___Configurator?
            static var token: dispatch_once_t = 0
        }
        
        dispatch_once(&Static.token) {
            Static.instance = ___FILEBASENAMEASIDENTIFIER___Configurator()
        }
        
        return Static.instance!
    }
    
    // MARK: - Configuration
    func configure(viewController: ___FILEBASENAMEASIDENTIFIER___ViewController)
    {
        let router = ___FILEBASENAMEASIDENTIFIER___Router()
        router.viewController = viewController
        
        let presenter = ___FILEBASENAMEASIDENTIFIER___Presenter()
        presenter.output = viewController
        
        let interactor = ___FILEBASENAMEASIDENTIFIER___Interactor()
        interactor.output = presenter
        
        viewController.output = interactor
        viewController.router = router
    }
}
